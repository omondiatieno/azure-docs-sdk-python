### YamlMime:PythonClass
uid: azure.ai.textanalytics.TemperatureResolution
name: TemperatureResolution
fullName: azure.ai.textanalytics.TemperatureResolution
module: azure.ai.textanalytics
inheritances:
- azure.ai.textanalytics._generated.v2022_10_01_preview.models._models_py3.TemperatureResolution
- azure.ai.textanalytics._dict_mixin.DictMixin
summary: Represents the temperature entity resolution model.
constructor:
  syntax: 'TemperatureResolution(*, value: float, unit: str, **kwargs)'
methods:
- uid: azure.ai.textanalytics.TemperatureResolution.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.textanalytics.TemperatureResolution.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.ai.textanalytics.TemperatureResolution.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.ai.textanalytics.TemperatureResolution.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.ai.textanalytics.TemperatureResolution.get
  name: get
  signature: 'get(key: str, default: Any | None = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.textanalytics.TemperatureResolution.has_key
  name: has_key
  signature: 'has_key(k: str) -> bool'
  parameters:
  - name: k
    isRequired: true
- uid: azure.ai.textanalytics.TemperatureResolution.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.ai.textanalytics.TemperatureResolution.items
  name: items
  signature: items() -> Iterable[Tuple[str, Any]]
- uid: azure.ai.textanalytics.TemperatureResolution.keys
  name: keys
  signature: keys() -> Iterable[str]
- uid: azure.ai.textanalytics.TemperatureResolution.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.textanalytics.TemperatureResolution.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.textanalytics.TemperatureResolution.values
  name: values
  signature: values() -> Iterable[Any]
attributes:
- uid: azure.ai.textanalytics.TemperatureResolution.resolution_kind
  name: resolution_kind
  summary: 'The entity resolution object kind. Required. Known values are

    "DateTimeResolution" "NumberResolution", "OrdinalResolution",

    "SpeedResolution", "WeightResolution", "LengthResolution", "VolumeResolution",

    "AreaResolution", "AgeResolution", "InformationResolution", "TemperatureResolution",

    "CurrencyResolution", "NumericRangeResolution", and "TemporalSpanResolution".

    Described in <xref:azure.ai.textanalytics.ResolutionKind>.'
  signature: 'resolution_kind: Literal[''TemperatureResolution''] = ''TemperatureResolution'''
- uid: azure.ai.textanalytics.TemperatureResolution.unit
  name: unit
  summary: 'The temperature Unit of measurement. Required. Known values are "Unspecified",

    "Fahrenheit", "Kelvin", "Rankine", and "Celsius". Described in <xref:azure.ai.textanalytics.TemperatureUnit>.'
  signature: 'unit: str'
- uid: azure.ai.textanalytics.TemperatureResolution.value
  name: value
  summary: The numeric value that the extracted text denotes. Required.
  signature: 'value: float'
