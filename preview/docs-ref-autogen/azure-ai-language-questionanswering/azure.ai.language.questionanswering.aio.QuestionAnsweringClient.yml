### YamlMime:PythonClass
uid: azure.ai.language.questionanswering.aio.QuestionAnsweringClient
name: QuestionAnsweringClient
fullName: azure.ai.language.questionanswering.aio.QuestionAnsweringClient
module: azure.ai.language.questionanswering.aio
inheritances:
- azure.ai.language.questionanswering.aio._question_answering_client.QuestionAnsweringClient
summary: 'The language service API is a suite of natural language processing (NLP)
  skills built with best-in-class Microsoft machine learning algorithms.


  The API can be used to analyze unstructured text for tasks such as sentiment

  analysis, key phrase extraction, language detection and question answering.

  Further documentation can be found in [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview)'
constructor:
  syntax: 'QuestionAnsweringClient(endpoint: str, credential: AzureKeyCredential |
    AsyncTokenCredential, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoint (e.g.,

      [https:/](https:/)/<resource-name>.api.cognitiveservices.azure.com).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'Credential needed for the client to connect to Azure.

      This can be the an instance of AzureKeyCredential if using a Language API key

      or a token credential from <xref:azure.identity>.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: default_language
    description: Sets the default language to use for all operations.
    types:
    - <xref:str>
methods:
- uid: azure.ai.language.questionanswering.aio.QuestionAnsweringClient.close
  name: close
  signature: async close() -> None
- uid: azure.ai.language.questionanswering.aio.QuestionAnsweringClient.get_answers
  name: get_answers
  summary: Answers the specified question using your knowledge base.
  signature: async get_answers(*args, **kwargs) -> AnswersResult
  parameters:
  - name: options
    description: 'Positional only. POST body of the request. Either provide this

      value or individual keyword arguments.'
    isRequired: true
    types:
    - <xref:azure.ai.language.questionanswering.models.AnswersOptions>
  - name: project_name
    description: The name of the knowledge base project to use.
    types:
    - <xref:str>
  - name: deployment_name
    description: The name of the specific deployment of the project to use.
    types:
    - <xref:str>
  - name: qna_id
    description: 'Exact QnA ID to fetch from the knowledge base, this field takes
      priority over

      question.'
    types:
    - <xref:int>
  - name: question
    description: User question to query against the knowledge base.
    types:
    - <xref:str>
  - name: top
    description: Max number of answers to be returned for the question.
    types:
    - <xref:int>
  - name: user_id
    description: Unique identifier for the user.
    types:
    - <xref:str>
  - name: confidence_threshold
    description: Minimum threshold score for answers, value ranges from 0 to 1.
    types:
    - <xref:float>
  - name: answer_context
    description: Context object with previous QnA's information.
    types:
    - <xref:azure.ai.language.questionanswering.models.KnowledgeBaseAnswerContext>
  - name: ranker_kind
    description: 'Type of ranker to be used. Possible

      values include: "Default", "QuestionOnly".'
    types:
    - <xref:str>
  - name: filters
    description: Filter QnAs based on given metadata list and knowledge base sources.
    types:
    - <xref:azure.ai.language.questionanswering.models.QueryFilters>
  - name: short_answer_options
    description: To configure Answer span prediction feature.
    types:
    - <xref:azure.ai.language.questionanswering.models.ShortAnswerOptions>
  - name: include_unstructured_sources
    description: '(Optional) Flag to enable Query over Unstructured

      Sources.'
    types:
    - <xref:bool>
  return:
    description: AnswersResult
    types:
    - <xref:azure.ai.language.questionanswering.models.AnswersResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.language.questionanswering.aio.QuestionAnsweringClient.get_answers_from_text
  name: get_answers_from_text
  summary: Answers the specified question using the provided text in the body.
  signature: async get_answers_from_text(*args, **kwargs) -> AnswersFromTextResult
  parameters:
  - name: options
    description: 'Positional only. POST body of the request. Provide either *options*,
      OR

      individual keyword arguments. If both are provided, only the options object
      will be used.'
    isRequired: true
    types:
    - <xref:azure.ai.language.questionanswering.models.AnswersFromTextOptions>
  - name: question
    description: User question to query against the given text records.
    types:
    - <xref:str>
  - name: text_documents
    description: Text records to be searched for given question.
    types:
    - <xref:list>[<xref:str>
    - <xref:azure.ai.language.questionanswering.models.TextDocument>]
  - name: language
    description: 'Language of the text records. This is BCP-47 representation of a
      language.

      For example, use "en" for English; "es" for Spanish etc. If not set, use "en"
      for English as

      default.'
    types:
    - <xref:str>
  return:
    description: AnswersFromTextResult
    types:
    - <xref:azure.ai.language.questionanswering.models.AnswersFromTextResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.language.questionanswering.aio.QuestionAnsweringClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = await client.send_request(request)

    <AsyncHttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/python/protocol/quickstart](https://aka.ms/azsdk/python/protocol/quickstart)'
  signature: 'send_request(request: HttpRequest, **kwargs: Any) -> Awaitable[AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
