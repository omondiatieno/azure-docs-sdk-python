### YamlMime:PythonClass
uid: azure.datalake.store.core.AzureDLPath
name: AzureDLPath
fullName: azure.datalake.store.core.AzureDLPath
module: azure.datalake.store.core
inheritances:
- pathlib.PureWindowsPath
summary: 'Subclass of native object-oriented filesystem path.


  This is used as a convenience class for reducing boilerplate and

  eliminating differences between system-dependent paths.


  We subclass the system''s concrete pathlib class due to this issue:


  [http://stackoverflow.com/questions/29850801/subclass-pathlib-path-fails](http://stackoverflow.com/questions/29850801/subclass-pathlib-path-fails)


  Construct a PurePath from one or several strings and or existing

  PurePath objects.  The strings and path objects are combined so as

  to yield a canonicalized path, which is incorporated into the

  new PurePath object.'
constructor:
  syntax: AzureDLPath(*args)
  parameters:
  - name: path
    description: location of file or directory
    isRequired: true
    types:
    - <xref:azure.datalake.store.core.AzureDLPath>
    - <xref:string>
examples:
- "\n```\n\n>>> p1 = AzureDLPath('/Users/foo')  \n>>> p2 = AzureDLPath(p1.name)  \n\
  ```\n"
methods:
- uid: azure.datalake.store.core.AzureDLPath.as_posix
  name: as_posix
  summary: 'Return the string representation of the path with forward (/)

    slashes.'
  signature: as_posix()
- uid: azure.datalake.store.core.AzureDLPath.as_uri
  name: as_uri
  summary: Return the path as a 'file' URI.
  signature: as_uri()
- uid: azure.datalake.store.core.AzureDLPath.is_absolute
  name: is_absolute
  summary: 'True if the path is absolute (has both a root and, if applicable,

    a drive).'
  signature: is_absolute()
- uid: azure.datalake.store.core.AzureDLPath.is_relative_to
  name: is_relative_to
  summary: Return True if the path is relative to another path or False.
  signature: is_relative_to(*other)
- uid: azure.datalake.store.core.AzureDLPath.is_reserved
  name: is_reserved
  summary: 'Return True if the path contains one of the special names reserved

    by the system, if any.'
  signature: is_reserved()
- uid: azure.datalake.store.core.AzureDLPath.joinpath
  name: joinpath
  summary: 'Combine this path with one or several arguments, and return a

    new path representing either a subpath (if all arguments are relative

    paths) or a totally different path (if one of the arguments is

    anchored).'
  signature: joinpath(*args)
- uid: azure.datalake.store.core.AzureDLPath.match
  name: match
  summary: Return True if this path matches the given pattern.
  signature: match(path_pattern)
  parameters:
  - name: path_pattern
    isRequired: true
- uid: azure.datalake.store.core.AzureDLPath.relative_to
  name: relative_to
  summary: 'Return the relative path to another path identified by the passed

    arguments.  If the operation is not possible (because this is not

    a subpath of the other path), raise ValueError.'
  signature: relative_to(*other)
- uid: azure.datalake.store.core.AzureDLPath.startswith
  name: startswith
  summary: 'Return whether string starts with the prefix.


    This is equivalent to *str.startswith*.'
  signature: startswith(prefix, *args, **kwargs)
  parameters:
  - name: prefix
    isRequired: true
- uid: azure.datalake.store.core.AzureDLPath.trim
  name: trim
  summary: Return path without anchor (concatenation of drive and root).
  signature: trim()
- uid: azure.datalake.store.core.AzureDLPath.with_name
  name: with_name
  summary: Return a new path with the file name changed.
  signature: with_name(name)
  parameters:
  - name: name
    isRequired: true
- uid: azure.datalake.store.core.AzureDLPath.with_stem
  name: with_stem
  summary: Return a new path with the stem changed.
  signature: with_stem(stem)
  parameters:
  - name: stem
    isRequired: true
- uid: azure.datalake.store.core.AzureDLPath.with_suffix
  name: with_suffix
  summary: 'Return a new path with the file suffix changed.  If the path

    has no suffix, add given suffix.  If the given suffix is an empty

    string, remove the suffix from the path.'
  signature: with_suffix(suffix)
  parameters:
  - name: suffix
    isRequired: true
attributes:
- uid: azure.datalake.store.core.AzureDLPath.anchor
  name: anchor
  summary: The concatenation of the drive and root, or ''.
- uid: azure.datalake.store.core.AzureDLPath.drive
  name: drive
  summary: The drive prefix (letter or UNC path), if any.
- uid: azure.datalake.store.core.AzureDLPath.globless_prefix
  name: globless_prefix
  summary: Return shortest path prefix without glob quantifiers.
- uid: azure.datalake.store.core.AzureDLPath.name
  name: name
  summary: The final path component, if any.
- uid: azure.datalake.store.core.AzureDLPath.parent
  name: parent
  summary: The logical parent of the path.
- uid: azure.datalake.store.core.AzureDLPath.parents
  name: parents
  summary: A sequence of this path's logical parents.
- uid: azure.datalake.store.core.AzureDLPath.parts
  name: parts
  summary: 'An object providing sequence-like access to the

    components in the filesystem path.'
- uid: azure.datalake.store.core.AzureDLPath.root
  name: root
  summary: The root of the path, if any.
- uid: azure.datalake.store.core.AzureDLPath.stem
  name: stem
  summary: The final path component, minus its last suffix.
- uid: azure.datalake.store.core.AzureDLPath.suffix
  name: suffix
  summary: 'The final component''s last suffix, if any.


    This includes the leading period. For example: ''.txt'''
- uid: azure.datalake.store.core.AzureDLPath.suffixes
  name: suffixes
  summary: 'A list of the final component''s suffixes, if any.


    These include the leading periods. For example: [''.tar'', ''.gz'']'
