### YamlMime:PythonClass
uid: azure.eventhub.async_ops.sender_async.AsyncSender
name: AsyncSender
fullName: azure.eventhub.async_ops.sender_async.AsyncSender
module: azure.eventhub.async_ops.sender_async
inheritances:
- azure.eventhub.sender.Sender
summary: 'Implements the async API of a Sender.


  Instantiate an EventHub event SenderAsync handler.'
constructor:
  syntax: AsyncSender(client, target, partition=None, send_timeout=60, keep_alive=None,
    auto_reconnect=True, loop=None)
  parameters:
  - name: client
    description: The parent EventHubClientAsync.
    isRequired: true
    types:
    - <xref:azure.eventhub.async_ops.EventHubClientAsync>
  - name: target
    description: The URI of the EventHub to send to.
    isRequired: true
    types:
    - <xref:str>
  - name: partition
    description: 'The specific partition ID to send to. Default is *None*, in which
      case the service

      will assign to all partitions using round-robin.'
    defaultValue: None
    types:
    - <xref:str>
  - name: send_timeout
    description: 'The timeout in seconds for an individual event to be sent from the
      time that it is

      queued. Default value is 60 seconds. If set to 0, there will be no timeout.'
    defaultValue: '60'
    types:
    - <xref:int>
  - name: keep_alive
    description: 'The time interval in seconds between pinging the connection to keep
      it alive during

      periods of inactivity. The default value is *None*, i.e. no keep alive pings.'
    defaultValue: None
    types:
    - <xref:int>
  - name: auto_reconnect
    description: 'Whether to automatically reconnect the sender if a retryable error
      occurs.

      Default value is *True*.'
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: loop
    description: An event loop. If not specified the default event loop will be used.
    defaultValue: None
methods:
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.close
  name: close
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  signature: close(exception=None)
  parameters:
  - name: exception
    description: 'An optional exception if the handler is closing

      due to an error.'
    defaultValue: None
    types:
    - <xref:Exception>
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.close_async
  name: close_async
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  signature: async close_async(exception=None)
  parameters:
  - name: exception
    description: 'An optional exception if the handler is closing

      due to an error.'
    defaultValue: None
    types:
    - <xref:Exception>
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.get_handler_state
  name: get_handler_state
  summary: 'Get the state of the underlying handler with regards to start

    up processes.'
  signature: get_handler_state()
  return:
    types:
    - <xref:uamqp.constants.MessageSenderState>
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.has_started
  name: has_started
  summary: 'Whether the handler has completed all start up processes such as

    establishing the connection, session, link and authentication, and

    is not ready to process messages.

    **This function is now deprecated and will be removed in v2.0+.**'
  signature: async has_started()
  return:
    types:
    - <xref:bool>
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.open
  name: open
  summary: 'Open the Sender using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  signature: open()
  parameters:
  - name: connection
    description: The underlying client shared connection.
    isRequired: true
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.open_async
  name: open_async
  summary: 'Open the Sender using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  signature: async open_async()
  parameters:
  - name: connection
    description: The underlying client shared connection.
    isRequired: true
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect
  name: reconnect
  summary: 'If the Sender was disconnected from the service with

    a retryable error - attempt to reconnect.'
  signature: reconnect()
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
  name: reconnect_async
  summary: 'If the Receiver was disconnected from the service with

    a retryable error - attempt to reconnect.'
  signature: async reconnect_async()
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.send
  name: send
  summary: 'Sends an event data and asynchronously waits until

    acknowledgement is received or operation times out.'
  signature: async send(event_data)
  parameters:
  - name: event_data
    description: The event to be sent.
    isRequired: true
    types:
    - <xref:azure.eventhub.common.EventData>
  exceptions:
  - type: azure.eventhub.common.EventHubError if the message fails tosend.
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.transfer
  name: transfer
  summary: Transfers an event data and notifies the callback when the operation is
    done.
  signature: transfer(event_data, callback=None)
  parameters:
  - name: event_data
    description: The event to be sent.
    isRequired: true
    types:
    - <xref:azure.eventhub.common.EventData>
  - name: callback
    description: 'Callback to be run once the message has been send.

      This must be a function that accepts two arguments.'
    defaultValue: None
    types:
    - <xref:callable>[<xref:uamqp.constants.MessageSendResult>, <xref:azure.eventhub.common.EventHubError>]
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.wait
  name: wait
  summary: Wait until all transferred events have been sent.
  signature: wait()
- uid: azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
  name: wait_async
  summary: Wait until all transferred events have been sent.
  signature: async wait_async()
