### YamlMime:PythonClass
uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver
name: AsyncReceiver
fullName: azure.eventhub.async_ops.receiver_async.AsyncReceiver
module: azure.eventhub.async_ops.receiver_async
inheritances:
- azure.eventhub.receiver.Receiver
summary: 'Implements the async API of a Receiver.


  Instantiate an async receiver.'
constructor:
  syntax: AsyncReceiver(client, source, offset=None, prefetch=300, epoch=None, keep_alive=None,
    auto_reconnect=True, loop=None)
  parameters:
  - name: client
    description: The parent EventHubClientAsync.
    isRequired: true
    types:
    - <xref:azure.eventhub.async_ops.EventHubClientAsync>
  - name: source
    description: The source EventHub from which to receive events.
    isRequired: true
    types:
    - <xref:uamqp.address.Source>
  - name: prefetch
    description: 'The number of events to prefetch from the service

      for processing. Default is 300.'
    defaultValue: '300'
    types:
    - <xref:int>
  - name: epoch
    description: An optional epoch value.
    defaultValue: None
    types:
    - <xref:int>
  - name: loop
    description: An event loop.
    defaultValue: None
  - name: offset
    defaultValue: None
  - name: keep_alive
    defaultValue: None
  - name: auto_reconnect
    defaultValue: 'True'
methods:
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.close
  name: close
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  signature: close(exception=None)
  parameters:
  - name: exception
    description: 'An optional exception if the handler is closing

      due to an error.'
    defaultValue: None
    types:
    - <xref:Exception>
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.close_async
  name: close_async
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  signature: async close_async(exception=None)
  parameters:
  - name: exception
    description: 'An optional exception if the handler is closing

      due to an error.'
    defaultValue: None
    types:
    - <xref:Exception>
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.get_handler_state
  name: get_handler_state
  summary: 'Get the state of the underlying handler with regards to start

    up processes.'
  signature: get_handler_state()
  return:
    types:
    - <xref:uamqp.constants.MessageReceiverState>
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.has_started
  name: has_started
  summary: 'Whether the handler has completed all start up processes such as

    establishing the connection, session, link and authentication, and

    is not ready to process messages.

    **This function is now deprecated and will be removed in v2.0+.**'
  signature: async has_started()
  return:
    types:
    - <xref:bool>
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.open
  name: open
  summary: 'Open the Receiver using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  signature: open()
  parameters:
  - name: connection
    description: The underlying client shared connection.
    isRequired: true
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.open_async
  name: open_async
  summary: 'Open the Receiver using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  signature: async open_async()
  parameters:
  - name: connection
    description: The underlying client shared connection.
    isRequired: true
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.receive
  name: receive
  summary: Receive events asynchronously from the EventHub.
  signature: async receive(max_batch_size=None, timeout=None)
  parameters:
  - name: max_batch_size
    description: 'Receive a batch of events. Batch size will

      be up to the maximum specified, but will return as soon as service

      returns no new events. If combined with a timeout and no events are

      retrieve before the time, the result will be empty. If no batch

      size is supplied, the prefetch size will be the maximum.'
    defaultValue: None
    types:
    - <xref:int>
  - name: timeout
    defaultValue: None
  return:
    types:
    - <xref:list>[<xref:azure.eventhub.common.EventData>]
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.reconnect
  name: reconnect
  summary: 'If the Receiver was disconnected from the service with

    a retryable error - attempt to reconnect.'
  signature: reconnect()
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.reconnect_async
  name: reconnect_async
  summary: 'If the Receiver was disconnected from the service with

    a retryable error - attempt to reconnect.'
  signature: async reconnect_async()
attributes:
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.queue_size
  name: queue_size
  summary: The current size of the unprocessed Event queue.
  return:
    types:
    - <xref:int>
- uid: azure.eventhub.async_ops.receiver_async.AsyncReceiver.timeout
  name: timeout
  signature: timeout = 0
